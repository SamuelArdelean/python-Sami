1. virtual env- un compendiu de pachete pe care le contine proiectul si versiunile pachetelor respective
prima data adaugam virtual env, mai apoi proiectul
comanda: py -m venv env

2. activarea env- py source env/bin/activate

3. adaugare proiect
comanda: django-admin startproject proiect(notes)

4.adaugare aplicatie
comanda: py manage.py startapp aplicatie(document)

5.manage.py este folderul de executie, este folosit atunci cand cream aplicatie (startapp)

6. py manage.py runserver-> deschidem serrverul de django

7. DB SQLite-

8. Proiectul poate contine mai multe foldere de aplicatie( pot fi mai multe aplicatii intr-un proiect), contine si
folderul proiect( notes) care contine cateva pachete si folderul manage.py si dbsqlite- baza de date din django

9. Manage.py- fisierul care ruleaza, comanda if __name__= main-> ruleaza functia main si foloseste fisierul
setings.py din proiect (notes)

10. in fisierul setings.py->
INSTALLED_APPS- o lista care face referinta catre aplicatii
MIDDLEWARE- se ruleaza la un anumit moment
ROOT_URLCONF- url-ul proiectului principal se gaseste in fisierul urls, acolo se afla toate rutele principale
TEMPLATES- fisierele html
    'context_processor'- ne ajuta sa trimitem aceeasi valoare in mai multe locuri din
Folderul static- mentinem toate fisierele css, js, ce are legatura cu imagini

11. In fisierul URLS- fisierul principal in care tinem toate rutele
12. In admin.py- trecem setarile prin care dorim sa administram direct din pagina de admin o anumita aplicatie
13. apps.py face legatura direct cu aplicatia
14. models.py- structura bazei de date
15. Views.py- tot scheletul de clase de care avem nevoie in aplicatia respectiva

16. py manage.py makemigrations -> ne ia structura bazei de date si ne structureaza noul tabel
17. py manage.py migrate -> transforma structura din python in baza de date

18. DB SQL-

19. py manage.py createsuperuser -> ne creeam un username care va aparea si in BD SQL la auth_user
20. modelarea aplicatiilor in baza de date se realizeaza prin intermediul fisierului models.py
in settings.py la installed_apps, specificam ca vrem sa utilizam aplicatia noastra (document)
in 0001_initial class Migration(migrations.Migration):  #clasa care mosteneste migrarile, creata automat
ulterior, ne adaugam url-ul principal al aplicatie noastre- in urls.py
path- modalitatea prin care se face legatura intre url, clasa si denumirea acestuia

In fiiserul html
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    #folosim acest import pentru a aceesa toate clasele din acest pachet
